{"version":3,"file":"imageboardpreviewrenderer.min.js","sources":["../src/imageboardpreviewrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport const init = () => {\n    // Timeout notwendig, damit das Bild in der Draftarea \"vorhanden\" ist.\n    // document.querySelector('#id_unilabeltype_imageboard_backgroundimage_fieldset .filemanager-container .realpreview');\n    setTimeout(refreshBackgroundImage, 2000);\n    setTimeout(registerAllEventlistener, 2500);\n    // To show all images on pageload.\n    setTimeout(refreshAllImages, 2500);\n\n    /**\n     *\n     * @param {event} event\n     */\n    function oneListenerForAllInputFocusout(event) {\n        console.log(\"oneListenerForAllInputFocusout\", event);\n        // The following events will be recognized and depending on the type we do the jobs.\n        // 1. event: focusout (xpositioninput, yositioninput, title, ...)\n        // 2. event: click (add element button)\n        console.log(\"event.target\", event.target);\n\n        var dummyAttribute = event.target.getAttribute('id');\n        var titleInput = dummyAttribute.split('id_unilabeltype_imageboard_title_')[1];\n        if (titleInput) {\n            console.log(\"titleInput\", titleInput);\n            // Target ist inputfeld xposition so we have tu update the image\n            refreshImage(titleInput);\n            return;\n        }\n\n        var xPositionInput = dummyAttribute.split('id_unilabeltype_imageboard_xposition_')[1];\n        console.log(\"xPositionInput\", xPositionInput);\n        if (xPositionInput) {\n            // Target ist inputfeld xposition so we have tu update the image\n            refreshImage(xPositionInput);\n            return;\n        }\n\n        var yPositionInput = dummyAttribute.split('id_unilabeltype_imageboard_yposition_')[1];\n        console.log(\"yPositionInput\", yPositionInput);\n        if (yPositionInput) {\n            // Target ist inputfeld yposition so we have tu update the image\n            refreshImage(yPositionInput);\n            return;\n        }\n\n        var targetwidth = dummyAttribute.split('id_unilabeltype_imageboard_targetwidth_')[1];\n        console.log(\"targetwidth\", targetwidth);\n        if (targetwidth) {\n            refreshImage(targetwidth);\n            return;\n        }\n\n        var targetheight = dummyAttribute.split('id_unilabeltype_imageboard_targetheight_')[1];\n        console.log(\"targetheight\", targetheight);\n        if (targetheight) {\n            refreshImage(targetheight);\n            return;\n        }\n\n        var border = dummyAttribute.split('id_unilabeltype_imageboard_border_')[1];\n        console.log(\"border\", border);\n        if (border) {\n            refreshImage(border);\n            return;\n        }\n        console.log('');\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function oneListenerForAllInputClick(event) {\n        var dummyAttribute = event.target.getAttribute('id');\n        var mform = dummyAttribute.split('button-mform1')[1];\n        if (mform) {\n            setTimeout(function() {\n                // An element was added so we have to add a div for the image to the dom.\n                let singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_title_\"]');\n                let number = singleElements.length;\n                addImageToDom(number - 1);\n            }, 500);\n        }\n    }\n\n    /**\n     * Register eventlistener to the all input fields of the form to register\n     * focus-out events from input fields in order to trigger a fresh of the preview.\n     */\n    function registerAllEventlistener() {\n        var mform = document.querySelectorAll('[id^=\"mform\"]')[0];\n        // We register one listener per eventtype to the mform and use the bubble-event-feature to check out\n        // the target of an event.\n        // All focusout events will be handeled by oneListenerForAllInputFocusout.\n        mform.addEventListener(\"focusout\", oneListenerForAllInputFocusout, false);\n        // All click events will be handeled by oneListenerForAllInputClick.\n        mform.addEventListener(\"click\", oneListenerForAllInputClick, false);\n\n        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.\n        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        if (backgroundfileNode) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n        }\n        // Also add listener for canvas size\n        let canvasx = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n        if (canvasx) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasx, {attributes: true, childList: true, subtree: true});\n        }\n        let canvasy = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n        if (canvasy) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasy, {attributes: true, childList: true, subtree: true});\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        // previewimage vom filemanager id_unilabeltype_imageboard_backgroundimage_fieldset erhalten\n        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');\n        let backgrounddiv = document.getElementById('unilabel-imageboard-background-area');\n        if (previewimage.length > 0) {\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            backgrounddiv.style.background = 'red'; // just to indicate changes during development.\n            backgrounddiv.style.backgroundSize = 'cover';\n            backgrounddiv.style.backgroundImage = \"url('\" + backgroundurl + \"')\";\n\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        } else {\n            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;\n            // ToDo    if (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!\n            backgrounddiv.style.background = 'green'; // just to indicate changes during development.\n            backgrounddiv.style.backgroundImage = \"url('')\";\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        }\n    }\n\n    /**\n     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.\n     * We need a timeout\n     */\n    function refreshAllImages() {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // Todo: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            // Check if there exists already a div for this image.\n            const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n            if (imageid === null) {\n                // Div does not exist so we need do add it do dom.\n                addImageToDom(number);\n                // ToDo: Do we need a timeout to wait until the dic was added so that refresh can work correctly?\n                // see also refreshImage ... there is already a timeout\n                refreshImage(number);\n            } else {\n                refreshImage(number);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {int} number\n     */\n    function addImageToDom(number) {\n        console.log(\"addImageToDom\" + number);\n        let backgroundArea = document.getElementById('unilabel-imageboard-background-area');\n        const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n        if (imageid === null) {\n            console.log('div fehlt noch im dom ' + imageid);\n            // This div does not exist so we need do add it do dom.\n            backgroundArea.innerHTML = backgroundArea.innerHTML + renderFromTemplate(number);\n            // add an obverser to be aple to update if imge is uloaded\n            let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));\n            if (imagefileNode) {\n                let observer = new MutationObserver(refreshImage);\n                observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});\n            }\n            refreshImage(number);\n        } else {\n            console.log('div existiert ' + number);\n            // Div already exists so we need only to refresh the image because we only uploaded a new image\n            // to an already existing div.\n            refreshImage(number);\n        }\n    }\n\n    /**\n     * Renders the div for the image in preview.\n     *\n     * @param {int} number\n     * @returns {string}\n     */\n    function renderFromTemplate(number) {\n        const imagedivashtml =\n            \"<div id='unilabel_imageboard_imagediv_\" + number + \"' style='z-index: 5; position: absolute;'>\" +\n            \"<div id='imageidtitle_\" + number + \"' class='unilabel-imageboard-title rounded' \" +\n            \" style='position: relative;'>Überschrift\" +\n            \"</div>\" +\n            \"<div id='imageidimage_\" + number + \"'>\" +\n            \"<img class='image' src='' id='unilabel-imageboard-imageid_\" +\n            number + \"' style='position: relative; min-width: 100px; min-height: 100px; background-color: #f00;'>\" +\n            \"</div>\" +\n            \"</div>\";\n        return imagedivashtml;\n    }\n\n    /**\n     * If an image was uploaded or inputfields in the form changed then we need to refrech\n     * this image.\n     * @param {int} number\n     */\n    function refreshImage(number) {\n        // When there was an upload, then the number is NOT a number.\n        // ToDo: Do not yet know the best way how I will get the number in his case.\n        // For now if it is a number the normal refresh can be used and only ONE image will be refreshed.\n        // In the else code ther will be a refresh of ALL images until I can refactor this.\n        if (!Array.isArray(number)) {\n            let imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n            // Werte für das image setzen\n            let imagedata = getAllImagedataFromForm(number);\n            imageid.style.background = 'blue';\n            imageid.src = imagedata['src'];\n            const imagediv = document.getElementById('unilabel_imageboard_imagediv_' + number);\n            imagediv.style.left = parseInt(imagedata['xposition']) + \"px\";\n            imagediv.style.top = parseInt(imagedata['yposition']) + \"px\";\n\n            // Breite und Höhe\n            if (imagedata['targetwidth'] != 0) {\n                imageid.style.width = imagedata['targetwidth'] + \"px\";\n            } else {\n                imageid.style.width = \"auto\";\n            }\n            if (imagedata['targetheight'] != 0) {\n                imageid.style.height = imagedata['targetheight'] + \"px\";\n            } else {\n                imageid.style.height = \"auto\";\n            }\n            if (imagedata['title'] != \"\") {\n                imageid.title = imagedata['title'];\n            } else {\n                imageid.title = '';\n            }\n            let colourpicker = document.getElementById('id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker');\n            let color = '';\n            if (colourpicker.value == '') {\n                color = '#000000';\n            } else {\n                color = colourpicker.value;\n            }\n            if (imagedata['border'] != 0) {\n                imageid.style.border = imagedata['border'] + \"px solid\";\n                imageid.style.borderColor = color;\n            } else {\n                imageid.style.border = \"0\";\n            }\n\n            // ToDo: add title if not empty\n            let title = imagedata['title'];\n            const imageidtitle = document.getElementById('imageidtitle_' + number);\n            imageidtitle.innerHTML = title;\n        } else {\n            //console.log(\"number ist ein array\" , number);\n            //console.log(\"number[0] ist ein array\" , number[0]);\n            //console.log(\"number[0].attributeName ist ein array\" , number[0].attributeName);\n            //////console.log(\"number[0].target ist ein array\", number[0].target);\n            setTimeout(function() {\n                refreshAllImages();\n            }, 600);\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        console.log(\"getAllImagedataFromForm number= \" + number);\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n        };\n\n        let imagedata = [];\n        console.log(\"document.getElementById(imageids.title)\", document.getElementById(imageids.title));\n        imagedata['title'] = document.getElementById(imageids.title).value;\n        imagedata['xposition'] = document.getElementById(imageids.xposition).value;\n        imagedata['yposition'] = document.getElementById(imageids.yposition).value;\n        imagedata['targetwidth'] = document.getElementById(imageids.targetwidth).value;\n        imagedata['targetheight'] = document.getElementById(imageids.targetheight).value;\n\n        // Src der Draftfile ermitteln\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata['src'] = src;\n        imagedata['border'] = document.getElementById(imageids.border).value;\n\n        return imagedata;\n    }\n};\n"],"names":["oneListenerForAllInputFocusout","event","console","log","target","dummyAttribute","getAttribute","titleInput","split","refreshImage","xPositionInput","yPositionInput","targetwidth","targetheight","border","oneListenerForAllInputClick","setTimeout","addImageToDom","document","querySelectorAll","length","refreshBackgroundImage","previewimage","getElementById","getElementsByClassName","backgrounddiv","backgroundurl","includes","style","background","backgroundSize","backgroundImage","canvaswidth","selectedOptions","value","width","canvasheight","height","refreshAllImages","singleElements","i","number","backgroundArea","imageid","innerHTML","renderFromTemplate","imagefileNode","MutationObserver","observe","attributes","childList","subtree","Array","isArray","imagedata","imageids","title","xposition","yposition","src","imagetag","getElementsByTagName","getAllImagedataFromForm","imagediv","left","parseInt","top","colourpicker","color","borderColor","mform","addEventListener","backgroundfileNode","canvasx","canvasy"],"mappings":"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"}