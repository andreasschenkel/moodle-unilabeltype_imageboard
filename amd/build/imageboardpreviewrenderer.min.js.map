{"version":3,"file":"imageboardpreviewrenderer.min.js","sources":["../src/imageboardpreviewrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport const init = () => {\n    // Timeout notwendig, damit das Bild in der Draftarea \"vorhanden\" ist.\n    // document.querySelector('#id_unilabeltype_imageboard_backgroundimage_fieldset .filemanager-container .realpreview');\n    setTimeout(refreshBackgroundImage, 3000);\n    setTimeout(registerAllEventlistener, 4000);\n    // To show all images on pageload.\n    setTimeout(refreshAllImages, 5000);\n    // Store some data about the selected image that is moved.\n    var activeItem = null;\n    var activeNumber = null;\n    // itemToMove is the div that the selected image is inside. We do NOT move the image we move the div.\n    var itemToMove = null;\n    var xoffset = 0;\n    var yoffset = 0;\n    var canvas = null;\n    listener();\n\n    /**\n     *\n     */\n    function listener() {\n        ////console.log(\"listener\");\n        setTimeout(function() {\n            canvas = document.getElementById(\"unilabel-imageboard-background-area\");\n            canvas.addEventListener(\"mousedown\", dragStart, false);\n            canvas.addEventListener(\"mousemove\", drag, false);\n            canvas.addEventListener(\"mouseup\", dragEnd, false);\n        }, 1000);\n\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function dragStart(event) {\n        console.log(\"dragStart\");\n        console.log(\"event\", event);\n        if (event.target.classList.contains('image')) {\n            event.preventDefault();\n            activeItem = event.target;\n            activeNumber = event.target.getAttribute('id').split('unilabel-imageboard-imageid_')[1];\n            itemToMove = document.getElementById('unilabel_imageboard_imagediv_' + activeNumber);\n            var position = canvas.getBoundingClientRect();\n            var offsetLeft = position.left;\n            var offsetTop = position.top;\n            xoffset = event.layerX;\n            yoffset = event.layerY;\n            console.log(\"event.clientX - offsetLeft - xoffset\", event.clientX, offsetLeft, xoffset);\n            console.log(\"event.clientY - offsetTop - yoffset\", event.clientY, offsetTop, yoffset);\n            var xposition = event.clientX - offsetLeft - xoffset;\n            var yposition = event.clientY - offsetTop - yoffset;\n            if (activeItem) {\n                itemToMove.style.left = Math.round(xposition) + \"px\";\n                itemToMove.style.top = Math.round(yposition) + \"px\";\n            }\n        } else {\n            ///console.log(\"no image selected\");\n        }\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function drag(event) {\n        //event.preventDefault();\n        console.log(\"drag\");\n        console.log(\"event\", event);\n        if (event.target.classList.contains('image') && activeItem) {\n            var position = canvas.getBoundingClientRect();\n            console.log(\"position\", position);\n            var offsetLeft = position.left;\n            var offsetTop = position.top;\n            //var xoffset = event.target.clientWidth / 2;\n            //var yoffset = event.target.clientHeight / 2;\n            var xposition = event.clientX - offsetLeft - xoffset;\n            var yposition = event.clientY - offsetTop - yoffset;\n            if (xposition < 0) {\n                xposition = 0;\n            }\n            if (yposition < 0) {\n                yposition = 0;\n            }\n            itemToMove.style.left = Math.round(xposition) + \"px\";\n            itemToMove.style.top = Math.round(yposition) + \"px\";\n            // Change the inputfield\n            const input_xposition = document.getElementById('id_unilabeltype_imageboard_xposition_' + (activeNumber));\n            const input_yposition = document.getElementById('id_unilabeltype_imageboard_yposition_' + (activeNumber));\n            input_xposition.value = Math.round(xposition);\n            input_yposition.value = Math.round(yposition);\n        }\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function dragEnd(event) {\n        //event.preventDefault();\n        console.log(\"----dragEnd\");\n        console.log(\"event\", event);\n        if (activeItem) {\n            var position = canvas.getBoundingClientRect();\n            var offsetLeft = position.left;\n            var offsetTop = position.top;\n            //var xoffset = event.target.clientWidth / 2;\n            //var yoffset = event.target.clientHeight / 2;\n            var xposition = event.clientX - offsetLeft - xoffset;\n            var yposition = event.clientY - offsetTop - yoffset;\n            if (xposition < 0) {\n                xposition = 0;\n            }\n            if (yposition < 0) {\n                yposition = 0;\n            }\n            itemToMove.style.left = Math.round(xposition) + \"px\";\n            itemToMove.style.top = Math.round(yposition) + \"px\";\n\n            // Change the inputfield\n            const input_xposition = document.getElementById('id_unilabeltype_imageboard_xposition_' + (activeNumber));\n            const input_yposition = document.getElementById('id_unilabeltype_imageboard_yposition_' + (activeNumber));\n            input_xposition.value = Math.round(xposition);\n            input_yposition.value = Math.round(yposition);\n            activeItem = null;\n            activeNumber = null;\n        }\n    }\n\n\n    /**\n     * Register eventlistener to the all input fields of the form to register\n     * focus-out events from input fields in order to trigger a fresh of the preview.\n     */\n    function registerAllEventlistener() {\n        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.\n        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        if (backgroundfileNode) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n        }\n        // Also add listener for canvas size\n        let canvasx = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n        if (canvasx) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasx, {attributes: true, childList: true, subtree: true});\n        }\n        let canvasy = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n        if (canvasy) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasy, {attributes: true, childList: true, subtree: true});\n        }\n\n        // Second add listener to the add image button for new added images.\n        let add_element_button = document.querySelectorAll('[id^=\"button-mform1\"]')[0];\n        add_element_button.addEventListener(\"click\", function() {\n            // No we can get the new form input fields and register a focusout listener\n            // and in case of focus out we update the rendered image.\n            // Thus we have to add a new div without any content and whenever there is a focusout event we will update this.\n            // Then register listener for all images already exists\n            setTimeout(function() {\n                // An element was added so we have to add a div for the image\n                // to the dom and wie need to register listener to the ne inputfieds of the element\n                const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_title_\"]');\n                let number = singleElements.length;\n                addImageToDom(number - 1);\n                setTimeout(function() {\n                    registerAllListenersForAllElements();\n                }, 1000);\n            }, 1000);\n        });\n\n        // Third register listener for all images already exists\n        setTimeout(function() {\n            registerAllListenersForAllElements();\n        }, 1000);\n    }\n\n    /**\n     *\n     */\n    function registerAllListenersForAllElements() {\n        // Third register listener for all images already exists\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_title_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            let number = singleElements[i].getAttribute('id').split('fitem_id_unilabeltype_imageboard_title_')[1];\n            registerAllListenersForSingleElement(number);\n        }\n    }\n\n    /**\n     * Registers to every input field a listener do find focusout events andthen call refreshimage().\n     * @param {int} number\n     */\n    function registerAllListenersForSingleElement(number) {\n        const input_title = document.getElementById('id_unilabeltype_imageboard_title_' + (number));\n        input_title.addEventListener(\"focusout\", function() {\n            refreshImage(number);\n        });\n\n        // Eventlistener an das Inputfeld für die x-Koordinate anhängen\n        // Here the position of imagediv is set, not the position of the image itself, but the image is in the div.\n        const input_xposition = document.getElementById('id_unilabeltype_imageboard_xposition_' + (number));\n        input_xposition.addEventListener(\"focusout\", function() {\n            refreshImage(number);\n        });\n        const input_yposition = document.getElementById('id_unilabeltype_imageboard_yposition_' + (number));\n        input_yposition.addEventListener(\"focusout\", function() {\n            refreshImage(number);\n        });\n\n        // Eventlistener an das Inputfeld für die width anhängen\n        const input_targetwidth = document.getElementById('id_unilabeltype_imageboard_targetwidth_' + (number));\n        input_targetwidth.addEventListener(\"focusout\", function() {\n            refreshImage(number);\n        });\n\n        const input_targetheight = document.getElementById('id_unilabeltype_imageboard_targetheight_' + (number));\n        input_targetheight.addEventListener(\"focusout\", function() {\n            refreshImage(number);\n        });\n\n        const input_border = document.getElementById('id_unilabeltype_imageboard_border_' + (number));\n        input_border.addEventListener(\"focusout\", function() {\n            refreshImage(number);\n        });\n\n        let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));\n        if (imagefileNode) {\n            let observer = new MutationObserver(refreshImage);\n            observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        // previewimage vom filemanager id_unilabeltype_imageboard_backgroundimage_fieldset erhalten\n        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');\n        let backgrounddiv = document.getElementById('unilabel-imageboard-background-area');\n        if (previewimage.length > 0) {\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            backgrounddiv.style.background = 'red'; // just to indicate changes during development.\n            backgrounddiv.style.backgroundSize = 'cover';\n            backgrounddiv.style.backgroundImage = \"url('\" + backgroundurl + \"')\";\n\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        } else {\n            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;\n            // ToDo    if (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!\n            backgrounddiv.style.background = 'green'; // just to indicate changes during development.\n            backgrounddiv.style.backgroundImage = \"url('')\";\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        }\n    }\n\n    /**\n     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.\n     * We need a timeout\n     */\n    function refreshAllImages() {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // Todo: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            // Check if there exists already a div for this image.\n            const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n            if (imageid === null) {\n                // Div does not exist so we need do add it do dom.\n                addImageToDom(number);\n                // ToDo: Do we need a timeout to wait until the dic was added so that refresh can work correctly?\n                // see also refreshImage ... there is already a timeout\n                refreshImage(number);\n            } else {\n                refreshImage(number);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {int} number\n     */\n    function addImageToDom(number) {\n        let backgroundArea = document.getElementById('unilabel-imageboard-background-area');\n        const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n        if (imageid === null) {\n            // This div does not exist so we need do add it do dom.\n            backgroundArea.innerHTML = backgroundArea.innerHTML + renderFromTemplate(number);\n            refreshImage(number);\n        } else {\n            // Div already exists so we need only to refresh the image.\n            refreshImage(number);\n        }\n    }\n\n    /**\n     * Renders the div for the image in preview.\n     *\n     * @param {int} number\n     * @returns {string}\n     */\n    function renderFromTemplate(number) {\n        const imagedivashtml =\n            \"<div id='unilabel_imageboard_imagediv_\" + number + \"' style='z-index: 5; position: absolute;'>\" +\n            \"<div id='imageidtitle_\" + number + \"' class='unilabel-imageboard-title rounded' \" +\n            \" style='position: relative;'>Überschrift\" +\n            \"</div>\" +\n            \"<div id='imageidimage_\" + number + \"'>\" +\n            \"<img class='image' src='' id='unilabel-imageboard-imageid_\" + number + \"' style='position: relative;'>\" +\n            \"</div>\" +\n            \"</div>\";\n        return imagedivashtml;\n    }\n\n    /**\n     * If an image was uploaded or inputfields in the form changed then we need to refrech\n     * this image.\n     * @param {int} number\n     */\n    function refreshImage(number) {\n        // When there was an upload, then the number is NOT a number.\n        // ToDo: Do not yet know the best way how I will get the number in his case.\n        // For now if it is a number the normal refresh can be used and only ONE image will be refreshed.\n        // In the else code ther will be a refresh of ALL images until I can refactor this.\n        if (!Array.isArray(number)) {\n            let imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n            // Werte für das image setzen\n            let imagedata = getAllImagedataFromForm(number);\n            imageid.style.background = 'blue';\n            imageid.src = imagedata['src'];\n            const imagediv = document.getElementById('unilabel_imageboard_imagediv_' + number);\n            imagediv.style.left = parseInt(imagedata['xposition']) + \"px\";\n            imagediv.style.top = parseInt(imagedata['yposition']) + \"px\";\n\n            // Breite und Höhe\n            if (imagedata['targetwidth'] != 0) {\n                imageid.style.width = imagedata['targetwidth'] + \"px\";\n            } else {\n                imageid.style.width = \"auto\";\n            }\n            if (imagedata['targetheight'] != 0) {\n                imageid.style.height = imagedata['targetheight'] + \"px\";\n            } else {\n                imageid.style.height = \"auto\";\n            }\n            if (imagedata['title'] != \"\") {\n                imageid.title = imagedata['title'];\n            } else {\n                imageid.title = '';\n            }\n            let colourpicker = document.getElementById('id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker');\n            let color = '';\n            if (colourpicker.value == '') {\n                color = '#000000';\n            } else {\n                color = colourpicker.value;\n            }\n            if (imagedata['border'] != 0) {\n                imageid.style.border = imagedata['border'] + \"px solid\";\n                imageid.style.borderColor = color;\n            } else {\n                imageid.style.border = \"0\";\n            }\n\n            // ToDo: add title if not empty\n            let title = imagedata['title'];\n            const imageidtitle = document.getElementById('imageidtitle_' + number);\n            imageidtitle.innerHTML = title;\n        } else {\n            //console.log(\"number ist ein array\" , number);\n            //console.log(\"number[0] ist ein array\" , number[0]);\n            //console.log(\"number[0].attributeName ist ein array\" , number[0].attributeName);\n            //////console.log(\"number[0].target ist ein array\", number[0].target);\n            // ToDo: nur genau den einen enuen listener hinzufügen ...\n            // hier schonaml ALLE\n            setTimeout(function() {\n                registerAllListenersForAllElements();\n            }, 300);\n            setTimeout(function() {\n                refreshAllImages();\n            }, 600);\n        }\n    }\n\n\n    /**\n     * The form has inputfields with date. This function gets the value from the inputfield with the given idselector\n     *\n     * @param {string} idselector 'id_unilabeltype_imageboard_yposition_' + number\n     * @returns {string}\n     */\n   /// function getValueFromForm(idselector) {\n   ///     return document.getElementById(idselector).getAttribute('value');\n   /// }\n\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n        };\n\n        let imagedata = [];\n        imagedata['title'] = document.getElementById(imageids.title).value;\n        imagedata['xposition'] = document.getElementById(imageids.xposition).value;\n        imagedata['yposition'] = document.getElementById(imageids.yposition).value;\n        imagedata['targetwidth'] = document.getElementById(imageids.targetwidth).value;\n        imagedata['targetheight'] = document.getElementById(imageids.targetheight).value;\n\n        // Src der Draftfile ermitteln\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata['src'] = src;\n        imagedata['border'] = document.getElementById(imageids.border).value;\n\n        return imagedata;\n    }\n};\n\n"],"names":["setTimeout","refreshBackgroundImage","backgroundfileNode","document","getElementById","MutationObserver","observe","attributes","childList","subtree","canvasx","canvasy","querySelectorAll","addEventListener","addImageToDom","length","registerAllListenersForAllElements","refreshAllImages","activeItem","activeNumber","itemToMove","xoffset","yoffset","canvas","dragStart","event","console","log","target","classList","contains","preventDefault","getAttribute","split","position","getBoundingClientRect","offsetLeft","left","offsetTop","top","layerX","layerY","clientX","clientY","xposition","yposition","style","Math","round","drag","input_xposition","input_yposition","value","dragEnd","singleElements","i","registerAllListenersForSingleElement","number","refreshImage","imagefileNode","previewimage","getElementsByClassName","backgrounddiv","backgroundurl","includes","background","backgroundSize","backgroundImage","canvaswidth","selectedOptions","width","canvasheight","height","backgroundArea","innerHTML","renderFromTemplate","Array","isArray","imageid","imagedata","imageids","title","targetwidth","targetheight","src","border","imagetag","getElementsByTagName","getAllImagedataFromForm","imagediv","parseInt","colourpicker","color","borderColor"],"mappings":"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"}