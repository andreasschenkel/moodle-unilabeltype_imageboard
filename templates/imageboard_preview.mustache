{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template unilabeltype_imageboard/imageboard_preview
    Template to show an imageboard with images.

    Example context (json):
    {
        "showintro": false,
        "intro": "",
        "images": [
            {
                "title": "",
                "url": "http://localhost/mod/forum/view.php?id=136",
                "newwindow": 1,
                "xposition": "150",
                "yposition": "100",
                "targetwidth": "80",
                "targetheight": "0",
                "fontsize": "12",
                "imageurl": "http://localhost/image1.png",
                "nr": 0
            },
            {
                "title": "",
                "url": "",
                "newwindow": 1,
                "xposition": "400",
                "yposition": "200",
                "targetwidth": "0",
                "targetheight": "0",
                "fontsize": "12",
                "imageurl": "http://localhost/image2.png",
                "nr": 1
            }
        ],
        "hasimages": true,
        "titlecolor": "#00ff00",
        "titlebackgroundcolor": "#0000ff",
        "cmid": "140",
        "canvaswidth": "500",
        "autoscale": false,
        "canvasheight": "600",
        "autocanvasheight": false,
        "backgroundimage": "",
        "capababilityforgrid": true,
        "bordercolor": "#2D57FA",
        "border": "4",
        "gridcolor": "#B7009E"
    }
}}
<div id="unilabel-imageboard-preview" style="border: solid 1px #3399ff; border-radius: 5px;">
    <div class="border" id="unilabel-imageboard-background-area" style="position: relative;">
        The preview will be placed here.
    </div>
</div>

<script>
    // Timeout notwendig, damit das Bild in der Draftarea "vorhanden" ist.  document.querySelector('#id_unilabeltype_imageboard_backgroundimage_fieldset .filemanager-container .realpreview');
    setTimeout(refreshBackgroundImage, 5000);
    setTimeout(registerAllEventlistener, 6000);
    // To show all images on pageload.
    setTimeout(displayAllImage, 7000);


    /**
     * Register eventlistener to the all input fields of the form to register focus-out events from input fields in order to trigger a fresh of the preview.
     */
    function registerAllEventlistener() {
        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.
        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');
        if (backgroundfileNode) {
            let observer = new MutationObserver(refreshBackgroundImage);
            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});
        }

        // Second add listener to the add image button for new added images.
        let add_element_button = document.querySelectorAll('[id^="button-mform1"]')[0];
        add_element_button.addEventListener("click", function() {
            // No we can get the new form input fields and register a focusout listener and in case of focus out we update the rendered image.
            // Thus we have to add a new div without any content and whenever there is a focusout event we will update this.
            // Then register listener for all images already exists
            setTimeout (function () {
                // An element was added so we have to add a div for the image to the dom and wie need to register listener to the ne inputfieds of the element
                const singleElements = document.querySelectorAll('[id^="fitem_id_unilabeltype_imageboard_title_"]');
                let number =  singleElements.length;
                addImageToDom(number-1);
                setTimeout (function () {
                    registerAllListenersForAllElements();
                }, 1000);
            }, 1000);
        });

        // Third register listener for all images already exists
        setTimeout (function () {
            registerAllListenersForAllElements();
        }, 1000);
    }

    /**
     *
     */
    function registerAllListenersForAllElements() {
        // Third register listener for all images already exists
        const singleElements = document.querySelectorAll('[id^="fitem_id_unilabeltype_imageboard_title_"]');
        for (let i = 0; i < singleElements.length; i++) {
            let number = singleElements[i].getAttribute('id').split('fitem_id_unilabeltype_imageboard_title_')[1];
            registerAllListenersForSingleElement(number);
        }
    }

    /**
     *
     * @param number
     */
    function registerAllListenersForSingleElement(number) {
        let imageid = document.getElementById('unilabel-imageboard-imageid_' + number);
        const imagediv = document.getElementById('unilabel_imageboard_imagediv_' + number);

        const input_title = document.getElementById('id_unilabeltype_imageboard_title_' + (number));
        input_title.addEventListener("focusout", function() {
            const title = input_title.value;
            if (title != "") {
                imageid.title = title;
                const imageidtitle = document.getElementById('imageidtitle_' + number);
                imageidtitle.innerHTML = title;

            } else {
                //imageid.title = "";
            }
        });

        // Eventlistener an das Inputfeld für die x-Koordinate anhängen
        // Here the position of imagediv is set, not the position of the image itself, but the image is in the div.
        const input_xposition = document.getElementById('id_unilabeltype_imageboard_xposition_' + (number));
        input_xposition.addEventListener("focusout", function() {
            const x = parseInt(input_xposition.value);
            imagediv.style.left = x + "px";
        });
        const input_yposition = document.getElementById('id_unilabeltype_imageboard_yposition_' + (number));
        input_yposition.addEventListener("focusout", function() {
            const y = parseInt(input_yposition.value);
            imagediv.style.top = y + "px";
        });

        // Eventlistener an das Inputfeld für die width anhängen
        const input_targetwidth = document.getElementById('id_unilabeltype_imageboard_targetwidth_' + (number));
        input_targetwidth.addEventListener("focusout", function() {
            const width = parseInt(input_targetwidth.value);
            if (width != 0) {
                imageid.style.width = width + "px";
            } else {
                imageid.style.width = "auto";
            }

        });

        const input_targetheight = document.getElementById('id_unilabeltype_imageboard_targetheight_' + (number));
        input_targetheight.addEventListener("focusout", function() {
            const height = parseInt(input_targetheight.value);
            if (height != 0) {
                imageid.style.height = height + "px";
            } else {
                imageid.style.height = "auto";
            }
        });

        const input_border = document.getElementById('id_unilabeltype_imageboard_border_' + (number));
        input_border.addEventListener("focusout", function() {
            let colourpicker = document.getElementById('id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker');
            if (colourpicker.value == '') {
                color = '#000000';
            } else {
                color = colourpicker.value;
            }

            const border = parseInt(input_border.value);
            if (border != 0) {
                imageid.style.border = border + "px solid " + color;
            } else {
                imageid.style.border = "0";
            }
        });

        let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));
        if (imagefileNode) {
            let observer = new MutationObserver(refreshImage);
            observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});
        }
    }

    /**
     * Sets the background image of the SVG to the current image in filemanager.
     */
    function refreshBackgroundImage() {
        // previewimage vom filemanager id_unilabeltype_imageboard_backgroundimage_fieldset erhalten
        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');
        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');
        let backgrounddiv = document.getElementById('unilabel-imageboard-background-area');
        if (previewimage.length > 0) {
            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];
            // If the uploaded file reuses the filename of a previously uploaded image, they differ
            // only in the oid. So one has to append the oid to the url.
            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {
                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];
            }
            backgrounddiv.style.background = 'red'; // just to indicate changes during development.
            backgrounddiv.style.backgroundSize = 'cover';
            backgrounddiv.style.backgroundImage = "url('" + backgroundurl + "')";

            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');
            let canvaswidthselected = canvaswidthinput.selectedOptions;
            let canvaswidth = canvaswidthselected[0].value;
            backgrounddiv.style.width = canvaswidth + "px";

            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');
            let canvasheightselected = canvasheightinput.selectedOptions;
            let canvasheight = canvasheightselected[0].value;
            backgrounddiv.style.height = canvasheight + "px";
        } else {
            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;
            // ToDo    if (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!
            backgrounddiv.style.background = 'green'; // just to indicate changes during development.
            backgrounddiv.style.backgroundImage = "url('')";
            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');
            let canvaswidthselected = canvaswidthinput.selectedOptions;
            let canvaswidth = canvaswidthselected[0].value;
            backgrounddiv.style.width = canvaswidth + "px";

            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');
            let canvasheightselected = canvasheightinput.selectedOptions;
            let canvasheight = canvasheightselected[0].value;
            backgrounddiv.style.height = canvasheight + "px";
        }
    }

    /**
     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.
     * We need a timeout
     */
    function displayAllImage() {
        const singleElements = document.querySelectorAll('[id^="fitem_id_unilabeltype_imageboard_image_"]');
        for (let i = 0; i < singleElements.length; i++) {
            // Todo: Skip removed elements that are still in the dom but hidden.
            let singleElement = singleElements[i].getAttribute('id');
            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];
            // Check if there exists already a div for this image.
            const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);
            if (imageid == null) {
                // Div does not exist so we need do add it do dom.
                addImageToDom(number);
                // ToDo: Do we need a timeout to wait until the dic was added so that refresh can work correctly?
                // see also refreshImage ... there is already a timeout
                refreshImage(number);
            } else {
                refreshImage(number);
            }
        }
    }

    /**
     *
     * @param number
     */
    function addImageToDom(number) {
        let backgroundArea = document.getElementById('unilabel-imageboard-background-area');
        const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);
        if (imageid == null) {
            // div does not exist so we need do add it do dom
            // hier später das template image nutzen!!!!
            imagecontainer = "<div id='unilabel_imageboard_imagediv_" + number + "' style='z-index: 5; position: absolute;'>" +
                "<div id='imageidtitle_" + number + "' class='unilabel-imageboard-title rounded' style='position: relative;'>Überschrift</div>" +
                "<div><img src='' id='unilabel-imageboard-imageid_" + number + "' style='position: relative;'></div>" +
                "</div>";
            backgroundArea.innerHTML = backgroundArea.innerHTML + imagecontainer;
            refreshImage(number);
        } else {
            // Div already exists so we need only an refresh.
            refreshImage(number);
        }
    }

    /**
     * If an image was uploaded or inputfields in the form changed then we need to refrech this image.
     * @param number
     */
    function refreshImage(number) {
        // When there was an upload, then the number is NOT a number.
        // ToDo: Do not yet know the best way how I will get the number in his case.
        // For now if it is a number the normal refresh can be used and only ONE image will be refreshed.
        // In the else code ther will be a refresh of ALL images until I can refactor this.
        if (!Array.isArray(number)) {
            const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);
            // Werte für das image setzen
            let imagedata = getAllImagedataFromForm(number);
            imageid.style.background = 'blue';
            //// image.style.backgroundSize = "100%";
            //image.style.backgroundImage = "url('" + imagedata['src'] + "')";
            imageid.src = imagedata['src'];

            const imagediv = document.getElementById('unilabel_imageboard_imagediv_' + number);
            imagediv.style.left = parseInt(imagedata['xposition']) + "px";
            imagediv.style.top = parseInt(imagedata['yposition']) + "px";

            ////image.style.left = parseInt(imagedata['xposition']) + "px";
            ////image.style.top = parseInt(imagedata['yposition']) + "px";
            // Breite und Höhe
            if (imagedata['targetwidth'] != 0) {
                imageid.style.width = imagedata['targetwidth'] + "px";
            } else {
                imageid.style.width = "auto";
            }
            if (imagedata['targetheight'] != 0) {
                imageid.style.height = imagedata['targetheight'] + "px";
            } else {
                image.style.height = "auto";
            }
            if (imagedata['title'] != "") {
                imageid.title = imagedata['title'];
            } else {
                //image.title = "";
            }
            let colourpicker = document.getElementById('id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker');
            if (colourpicker.value == '') {
                color = '#000000';
            } else {
                color = colourpicker.value;
            }
            if (imagedata['border'] != 0) {
                imageid.style.border = imagedata['border'] + "px solid";
                imageid.style.borderColor = color;
            } else {
                imageid.style.border = "0";
            }

            // ToDo: add title if not empty
            let title = imagedata['title'];
            const imageidtitle = document.getElementById('imageidtitle_' + number);
            imageidtitle.innerHTML = title;
        } else {
            //console.log("number ist ein array" , number);
            //console.log("number[0] ist ein array" , number[0]);
            //console.log("number[0].attributeName ist ein array" , number[0].attributeName);
            console.log("number[0].target ist ein array" , number[0].target);
            // ToDo: nur genau den einen enuen listener hinzufügen ...
            // hier schonaml ALLE
            setTimeout (function () {
                registerAllListenersForAllElements();
            }, 300);
            setTimeout (function () {
                displayAllImage();
            }, 600);
        }
    }


    /**
     * The form has inputfields with date. This function gets the value from the inputfield with the given idselector
     *
     * @param idselector 'id_unilabeltype_imageboard_yposition_' + number
     * @returns {string}
     */
    function getValueFromForm(idselector) {
        return document.getElementById(idselector).getAttribute('value');
    }


    /**
     * Get all data from image that is stored in the form and collects them in one array.
     *
     * @param {int} number of the image
     * @returns {*[]} Array with the collected information that are set in the form for the image.
     */
    function getAllImagedataFromForm(number) {
        const imageids = {
            title: 'id_unilabeltype_imageboard_title_' + number,
            xposition: 'id_unilabeltype_imageboard_xposition_' + number,
            yposition: 'id_unilabeltype_imageboard_yposition_' + number,
            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,
            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,
            src: '',
            border: 'id_unilabeltype_imageboard_border_' + number,
        };

        let imagedata = [];
        imagedata['title'] = document.getElementById(imageids.title).getAttribute('value');
        imagedata['xposition'] = document.getElementById(imageids.xposition).getAttribute('value');
        imagedata['yposition'] = document.getElementById(imageids.yposition).getAttribute('value');
        imagedata['targetwidth'] = document.getElementById(imageids.targetwidth).getAttribute('value');
        imagedata['targetheight'] = document.getElementById(imageids.targetheight).getAttribute('value');

        // Src der Draftfile ermitteln
        const imagetag = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset').getElementsByTagName('img');
        let src = '';
        if (imagetag.length && imagetag.length != 0) {
            src = imagetag[0].src;
            src = src.split('?')[0];
        }
        imagedata['src'] = src;
        imagedata['border'] = document.getElementById(imageids.border).value;

        return imagedata;
    }

</script>
